#===========================================================================
# Copyright (c) : Pulserain Technology, LLC. 2015
#===========================================================================
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
# 
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
# 
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

############################################################################# 
# SConstruct 
############################################################################# 

import atexit
from types import *

#=============================================================================
# Parameters set up for SCons to run
#=============================================================================
Progress(['-\r', '\\\r', '|\r', '/\r'], interval=5)
Decider('MD5')
SetOption('implicit_cache', 0)

#=============================================================================
# Compiling Environment set up
#=============================================================================
include      = ["."]
c_flags      = []
cpp_flags    = ['-std=c++11']
cc_flags     = ['-O3', '-Wall']
sub_projects = []
output_dir   = '#output_files'

#=============================================================================
# Build Variables set up, use "VERBOSE=yes" for verbose output
#=============================================================================

vars = Variables(None)
vars.AddVariables( 
                   BoolVariable('VERBOSE',                            'Verbose output', 0)
                 )

env = Environment(variables = vars)
                  
unknown = vars.UnknownVariables()
if unknown:
    print "Unknown Variables:", unknown.keys()
    Exit(1)


#=============================================================================
# setup default environment
#=============================================================================
default_env = DefaultEnvironment()
default_env.AppendUnique (CPPPATH = include)
default_env.AppendUnique (CFLAGS = c_flags)
default_env.AppendUnique (CXXFLAGS = cpp_flags)
default_env.AppendUnique (CCFLAGS = cc_flags)
cppdefines = {}    
for key_iter in vars.keys():

    if (type(env[key_iter]) is BooleanType):
        if ((env[key_iter]) and (key_iter != 'VERBOSE')):
            default_env.AppendUnique (CCFLAGS = ['-D' + key_iter])
    else:
        cppdefines[key_iter] = env[key_iter]

default_env.AppendUnique (CPPDEFINES = cppdefines)    


if (not env['VERBOSE']):
    default_env['CCCOMSTR']   = " \n===> C Compiling $TARGET"
    default_env['CXXCOMSTR']  = " \n===> C++ Compiling $TARGET" 
    default_env['LINKCOMSTR'] = " \n===> Linking $TARGET"

#=============================================================================
# include all the SConscript files in sub folders,
# collect all objects for final target
#=============================================================================
objs = Object (['CORDIC.c', 'test_main.c']) 
for subdir in sub_projects:
    output_sub_dir = output_dir + '/' + subdir
    o = SConscript('%s/SConscript' %subdir, 
                   variant_dir = output_sub_dir, duplicate = 0)
    objs.append (o)
    
    
#=============================================================================
# Target setup 
#=============================================================================
CORCIC = Program ('%s/CORDIC' %output_dir, objs)
Default (CORCIC)
Clean (CORCIC, output_dir)

    
############################################################################# 
# Report Failure during Exit
#
# (Notes : The following is copied from SCons User Guide)
############################################################################# 

def bf_to_str(bf):
    """Convert an element of GetBuildFailures() to a string
    in a useful way."""
    import SCons.Errors
    if bf is None: # unknown targets product None in list
        return '(unknown tgt)'
    elif isinstance(bf, SCons.Errors.StopError):
        return str(bf)
    elif bf.node:
        return str(bf.node) + ': ' + bf.errstr
    elif bf.filename:
        return bf.filename + ': ' + bf.errstr
    return 'unknown failure: ' + bf.errstr
import atexit

def build_status():
    """Convert the build status to a 2-tuple, (status, msg)."""
    from SCons.Script import GetBuildFailures
    bf = GetBuildFailures()
    if bf:
        # bf is normally a list of build failures; if an element is None,
        # it's because of a target that scons doesn't know anything about.
        status = 'failed'
        failures_message = "\n".join(["Failed building %s" % bf_to_str(x)
                           for x in bf if x is not None])
    else:
        # if bf is None, the build completed successfully.
        status = 'ok'
        failures_message = ''
    return (status, failures_message)

def display_build_status():
    """Display the build status.  Called by atexit.
    Here you could do all kinds of complicated things."""
    status, failures_message = build_status()
    if status == 'failed':
       print "========>FAILED!!!!"  # could display alert, ring bell, etc.
    elif status == 'ok':
       print "\n========> Build succeeded!"
    print failures_message

atexit.register(display_build_status)
############################################################################# 
# End of File
############################################################################# 